#!/bin/bash

set -e

# dump_vars=1

# set -x

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

NGINX_CONF_DIR="/etc/nginx/micronets-subscriber-forwards"
NGINX_RELOAD_COMMAND="sudo nginx -s reload"
SUBSCRIBER_PREFIX="mm-sub-"
DEF_MM_API_IMAGE_LOCATION="community.cablelabs.com:4567/micronets-docker/micronets-manager-api"
DEF_MM_APP_IMAGE_LOCATION="community.cablelabs.com:4567/micronets-docker/micronets-manager-app"
DEF_MM_DOCKER_TAG="nccoe-build-3"
DEF_MM_CERTS_DIR="/etc/micronets/micronets-manager.d/lib"
DOCKER_CMD="docker"
DOCKER_COMPOSE_CMD="docker-compose"
OPENSSL_CMD="openssl"
DEF_DOCKER_COMPOSE_FILE="${script_dir}/docker-compose.yml"

function bailout()
{
    local shortname="${0##*/}"
    local message="$1"
    echo "$shortname: error: ${message}" >&2
    exit 1;
}

function bailout_with_usage()
{
    local shortname="${0##*/}"
    local message="$1"
    echo "$shortname: error: ${message}" >&2
    print_usage
    exit 1;
}

function print_usage()
{
    local shortname="${0##*/}"
    echo " "
    echo "Usage: ${shortname} <operation>"
    echo ""
    echo "   operation can be one of:"
    echo ""
    echo "     pull: Download the mm docker image"
    echo "     create <subscriber-id>: Create and start the docker containers and nginx"
    echo "                             mappings for the given subscriber"
    echo "     delete <subscriber-id>: Remove the docker containers, resources, and nginx"
    echo "                             mappings for the given subscriber"
    echo "     stop <subscriber-id>: Stop the docker containers for the given subscriber"
    echo "     start <subscriber-id>: Start the docker containers for the given subscriber"
    echo "     restart <subscriber-id>: Restart the docker containers for the given subscriber"
    echo "                              (don't remove volumes/DBs)"
    echo "     logs <subscriber-id>: Dump at the micronet manager logs for the subscriber mm-api"
    echo "     trace <subscriber-id>: Watch the logs for the given subscriber mm-api"
    echo "     inspect <subscriber-id>: Inspect the attributes for the subscriber's mm-api"
    echo "     list [<subscriber-id>]: List the docker containers and resources for all"
    echo "                             subscribers or just one subscriber, when specified"
    echo "     address|addr [<subscriber-id>]: List the container addresses for the specified"
    echo "                                     subscribers or just one subscriber, when specified"
    echo "     stats: List the stats for all the docker containers"
    echo "     env <subscriber-id>: List the container environment variables for the subscriber"
    echo "     setup-web-proxy: Create the nginx directory for saving proxy conf files and set"
    echo "                      the permissions (requires sudo)"
    echo "     create-mso-secret: Create an MSO secret and write it to the MSO auth secret file"
    echo "                        (default \"$DEF_MM_CERTS_DIR/mso-auth-secret\")"
    echo ""
    echo "   subscriber-id can be any alphanumeric string, with hyphens or underscores"
    echo ""
    echo "   [--api-docker-image <api docker image ID>"
    echo "       (default \"$DEF_MM_API_IMAGE_LOCATION\")"
    echo "   [--app-docker-image <app docker image ID>"
    echo "       (default \"$DEF_MM_APP_IMAGE_LOCATION\")"
    echo "   [--docker-image-tag <image tag>"
    echo "       (default \"$DEF_MM_DOCKER_TAG\")"
    echo "   [--nginx-conf-dir <directory_to_add/remove nginx proxy rules>]"
    echo "       (default \"$NGINX_CONF_DIR\")"
    echo "   [--nginx-reload-command <command to cause nginx conf reload>]"
    echo "       (default \"$NGINX_RELOAD_COMMAND\")"
    echo "   [--docker-compose-file <full path to docker compose file>]"
    echo "       (default \"$DEF_DOCKER_COMPOSE_FILE\")"
    echo "   [--certs-dir <directory with CA and client certs>]"
    echo "       (default \"$DEF_MM_CERTS_DIR\")"
    echo "       Should contain \"micronets-ws-root.cert.pem\", \"micronets-manager.cert.pem\","
    echo "       and \"micronets-manager.key.pem\" files"
    echo "   [--auth-secret <512 hex digit secret>]"
    echo "       The auth secret to use for communication with the MSO Portal"
    echo "   [--auth-secret-file <filename containing a 512 hex digit secret>]"
    echo "       A file containing the auth secret to use for communication with the MSO Portal"
    echo "       (default \"$DEF_MM_CERTS_DIR/mso-auth-secret\")"
}

function process_arguments()
{
    shopt -s nullglob
    shopt -s shift_verbose

    operation=""
    subscriber_id=""
    api_docker_image_id="$DEF_MM_API_IMAGE_LOCATION"
    # app_docker_image_id="$DEF_MM_APP_IMAGE_LOCATION"
    docker_image_tag="$DEF_MM_DOCKER_TAG"
    nginx_conf_dir="$NGINX_CONF_DIR"
    nginx_reload_command="$NGINX_RELOAD_COMMAND"
    docker_compose_file="$DEF_DOCKER_COMPOSE_FILE"
    certs_dir="$DEF_MM_CERTS_DIR"
    mso_secret=""
    mso_secret_file="$DEF_MM_CERTS_DIR/mso-auth-secret"

    while [[ $1 == --* ]]; do
        opt_name=$1
        if [ "$opt_name" == "--api-docker-image" ]; then
            shift
            api_docker_image_id="$1"
            shift || bailout_with_usage "missing parameter to $opt_name"
        # elif [ "$opt_name" == "--app-docker-image" ]; then
        #     shift
        #     app_docker_image_id="$1"
        #     shift || bailout_with_usage "missing parameter to $opt_name"
        elif [ "$opt_name" == "--docker-image-tag" ]; then
            shift
            docker_image_tag="$1"
            shift || bailout_with_usage "missing parameter to $opt_name"
        elif [ "$opt_name" == "--nginx-conf-dir" ]; then
            shift
            nginx_conf_dir="$1"
            shift || bailout_with_usage "missing parameter to $opt_name"
        elif [ "$opt_name" == "--nginx-reload-command" ]; then
            shift
            nginx_reload_command="$1"
            shift || bailout_with_usage "missing parameter to $opt_name"
        elif [ "$opt_name" == "--docker-compose-file" ]; then
            shift
            docker_compose_file="$1"
            shift || bailout_with_usage "missing parameter to $opt_name"
        elif [ "$opt_name" == "--certs-dir" ]; then
            shift
            certs_dir="$1"
            shift || bailout_with_usage "missing parameter to $opt_name"
            [ -d $certs_dir ] || bailout_with_usage "$certs_dir is not a directory"
        elif [ "$opt_name" == "--auth-secret" ]; then
            shift
            mso_secret="$1"
            shift || bailout_with_usage "missing parameter to $opt_name"
        elif [ "$opt_name" == "--auth-secret-file" ]; then
            shift
            mso_secret_file="$1"
            shift || bailout_with_usage "missing parameter to $opt_name"
            [ -r $mso_secret_file ] || bailout "could not access $mso_secret_file"
        else
            bailout_with_usage "Unrecognized option: $opt_name"
        fi
    done

    if [ $# -lt 1 ]; then
        bailout_with_usage "Missing operation"
    fi

    operation=$1
    shift
    if [ "$operation" == "pull" ]; then
        subscriber_id=
    elif [ "$operation" == "create" ]; then
        subscriber_id="$1"
        shift || bailout_with_usage "missing subscriber ID for $operation operation"
    elif [ "$operation" == "delete" ]; then
        subscriber_id="$1"
        shift || bailout_with_usage "missing subscriber ID for $operation operation"
    elif [ "$operation" == "start" ]; then
        subscriber_id="$1"
        shift || bailout_with_usage "missing subscriber ID for $operation operation"
    elif [ "$operation" == "stop" ]; then
        subscriber_id="$1"
        shift || bailout_with_usage "missing subscriber ID for $operation operation"
    elif [ "$operation" == "restart" ]; then
        subscriber_id="$1"
        shift || bailout_with_usage "missing subscriber ID for $operation operation"
    elif [ "$operation" == "logs" ]; then
        subscriber_id="$1"
        shift || bailout_with_usage "missing subscriber ID for $operation operation"
    elif [ "$operation" == "trace" ]; then
        subscriber_id="$1"
        shift || bailout_with_usage "missing subscriber ID for $operation operation"
    elif [ "$operation" == "inspect" ]; then
        subscriber_id="$1"
        shift || bailout_with_usage "missing subscriber ID for $operation operation"
    elif [ "$operation" == "list" ]; then
        if [ $# -gt 0 ]; then
            subscriber_id="$1"
        fi
    elif [ "$operation" == "stats" ]; then
        subscriber_id=
    elif [ "$operation" == "address" -o "$operation" == "addr" ]; then
        if [ $# -gt 0 ]; then
            subscriber_id="$1"
        fi
    elif [ "$operation" == "env" ]; then
        subscriber_id="$1"
        shift || bailout_with_usage "missing subscriber ID for env operation"
    elif [ "$operation" == "setup-web-proxy" ]; then
        subscriber_id=
    elif [ "$operation" == "create-mso-secret" ]; then
        subscriber_id=
    else
        bailout_with_usage "Unrecognized operation: $operation"
    fi
}

function label_for_subscriber_id()
{
    subscriber_id="$1"
    echo "sub-${subscriber_id}"
}

function get_container_name_for_subscriber()
{
    subscriber_id="$1"
    resource_type="$2"
    container_list=$($DOCKER_CMD container ls -a -q \
      --filter label=com.cablelabs.micronets.subscriber-id=$subscriber_id \
      --filter label=com.cablelabs.micronets.resource-type=$resource_type)
    if [ -z $container_list ]; then
        bailout "Could not find a $resource_type container for subscriber $subscriber_id"
    fi
    echo "${container_list}"
}

function check_for_running_container()
{
    subscriber_id=$1
    api_container=$(get_container_name_for_subscriber $subscriber_id mm-api)
    if [ -n $api_container ]; then
        bailout "An API container for subscriber $subscriber_id already exists ($api_container)"
    fi
}

function get_ip_address_for_container()
{
    container_id=$1
    ip_address=$($DOCKER_CMD inspect \
                 -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' \
                 ${container_id})
    if [ -z $ip_address ]; then
        bailout "Could not get the IP address for container $container_id"
    fi
    echo "${ip_address}"
}

function get_nginx_rule_file_for_subscriber()
{
    subscriber_id="$1"
    subscriber_file_path="${nginx_conf_dir}/sub-${subscriber_id}.conf"
    echo "$subscriber_file_path"
}

function list_containers_for_subscriber()
{
    if [ ! -z "$1" ]; then
        subscriber_cond==$1
    fi
    echo "CONTAINERS:"
    echo "-------------------------------------------------------------------"
    $DOCKER_CMD container ls -a \
      --format 'table {{.ID}}\t{{.Label "com.cablelabs.micronets.resource-type"}}\t{{.Label "com.cablelabs.micronets.subscriber-id"}}\t\t{{.Names}}\t\t{{.Status}}' \
      --filter label=com.cablelabs.micronets.subscriber-id${subscriber_cond} \
     | (read -r ; sort -k 3)
}

function list_resources_for_subscriber()
{
    echo ""
    echo "VOLUMES:"
    echo "-------------------------------------------------------------------"
    $DOCKER_CMD volume ls \
      --format 'table {{.Label "com.cablelabs.micronets.resource-type"}}\t{{.Label "com.cablelabs.micronets.subscriber-id"}}\t\t{{.Name}}' \
      --filter label=com.cablelabs.micronets.subscriber-id${subscriber_cond}
    echo ""
    echo "NETWORKS:"
    echo "-------------------------------------------------------------------"
    $DOCKER_CMD network ls \
       --format 'table {{.Label "com.cablelabs.micronets.resource-type"}}\t{{.Label "com.cablelabs.micronets.subscriber-id"}}\t\t{{.Name}}' \
      --filter label=com.cablelabs.micronets.subscriber-id${subscriber_cond}
}

function list_container_addresses_for_subscriber()
{
    if [ -n "$1" ]; then
        subscriber_cond==$1
    fi

    container_list=$($DOCKER_CMD container ls -a -q --filter \
                     label=com.cablelabs.micronets.subscriber-id${subscriber_cond})
    if [ -z $container_list ]; then
        bailout "No containers found $subscriber_cond"
    fi
    for container_id in $container_list; do
        $DOCKER_CMD inspect \
                 -f '{{.Name}}{{"\t\t"}}{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' \
                 ${container_id}
    done
}

function list_container_env_for_subscriber()
{
    subscriber_id=$1
    mm_mongodb_container_id=$(get_container_name_for_subscriber $subscriber_id mm-mongo)
    echo "ENVIRONMENT FOR MONGODB CONTAINER FOR SUBSCRIBER $subscriber_id (container $mm_mongodb_container_id)"
    echo "----------------------------------------------------------------------------------"
    print_env_for_container_id $mm_mongodb_container_id

    mm_api_container_id=$(get_container_name_for_subscriber $subscriber_id mm-api)
    echo "ENVIRONMENT FOR MM API CONTAINER FOR SUBSCRIBER $subscriber_id (container $mm_api_container_id)"
    echo "----------------------------------------------------------------------------------"
    print_env_for_container_id $mm_api_container_id
}

function check_for_subscriber_container()
{
    subscriber_id=$1
    container_list=$($DOCKER_CMD container ls -a -q --filter \
                     label=com.cablelabs.micronets.subscriber-id=$subscriber_id)
    if [ -z $container_list ]; then
        bailout "could not find any containers for subscriber: $subscriber_id"
    fi
}

function check_for_container_for_subscriber()
{
    subscriber_id=$1
    if [ -n "$2" ]; then
        container_type_str="$2 "
        container_cond==$2
    fi

    container_list=$($DOCKER_CMD container ls -a -q \
                     --filter label=com.cablelabs.micronets.subscriber-id=$subscriber_id \
                     --filter label=com.cablelabs.micronets.resource-type$container_cond)
    if [ -z $container_list ]; then
        bailout "could not find any ${container_type_str}containers for subscriber: $subscriber_id"
    fi
}

function print_stats()
{
    echo "CONTAINER STATS:"
    echo "-------------------------------------------------------------------"
    # docker stats --no-stream --format 'table {{.Name}}\t{{.MemUsage}}\t{{.MemPerc}}'
    $DOCKER_CMD container stats -a --no-stream \
      --format 'table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}'
}

function print_env_for_container_id()
{
    container_id="$1"
    $DOCKER_CMD inspect -f '{{range .Config.Env}}{{.}}{{"\n"}}{{end}}' "$container_id"
}

function show_mmapi_logs_for_subscriber()
{
    subscriber_id=$1
    mm_api_container_id=$(get_container_name_for_subscriber $subscriber_id mm-api)
    show_logs_for_container $mm_api_container_id
}

function trace_mmapi_logs_for_subscriber()
{
    subscriber_id=$1
    mm_api_container_id=$(get_container_name_for_subscriber $subscriber_id mm-api)
    trace_logs_for_container $mm_api_container_id
}

function trace_logs_for_container()
{
    container_id="$1"
    $DOCKER_CMD logs --timestamps --follow --tail 50 $container_id
}

function show_logs_for_container()
{
    container_id="$1"
    $DOCKER_CMD logs --timestamps $container_id | less 2>&1
}

function inspect_mmapi_for_subscriber()
{
    subscriber_id=$1
    mm_api_container_id=$(get_container_name_for_subscriber $subscriber_id mm-api)
    $DOCKER_CMD inspect $mm_api_container_id | less 2>&1
}

function start_subscriber()
{
    subscriber_id="$1"
    echo "Creating resources for subscriber ${subscriber_id}..."
    subscriber_label=$(label_for_subscriber_id $subscriber_id)
    if [[ -z "$mso_secret" ]]; then
      if [[ -r "$mso_secret_file" ]]; then
        mso_secret=$(cat $mso_secret_file)
      else
        bailout "Could not open file $mso_secret_file"
      fi
    fi
    (MM_SUBSCRIBER_ID="$subscriber_id" \
       MM_API_SOURCE_IMAGE="$api_docker_image_id:$docker_image_tag" \
       MM_API_ENV_FILE="$docker_env_file" \
       MM_CERTS_DIR="$certs_dir" \
       MM_MSO_SECRET="$mso_secret" \
       $DOCKER_COMPOSE_CMD -f "$docker_compose_file" \
                           --project-name $subscriber_label up -d) \
         || bailout "Couldn't start subscriber ${subscriber_id}"
}

function delete_subscriber()
{
    subscriber_id="$1"
    check_for_container_for_subscriber $subscriber_id
    echo "Deleting resources for subscriber ${subscriber_id}..."
    subscriber_label=$(label_for_subscriber_id $subscriber_id)
    (MM_SUBSCRIBER_ID="$subscriber_id" \
       MM_API_SOURCE_IMAGE="$api_docker_image_id:$docker_image_tag" \
       MM_API_ENV_FILE="$docker_env_file" \
       MM_CERTS_DIR="$certs_dir" \
       MM_MSO_SECRET="$mso_secret" \
       $DOCKER_COMPOSE_CMD -f "$docker_compose_file" \
                           --project-name $subscriber_label down -v) \
       || bailout "Couldn't delete subscriber ${subscriber_id}"
}

function stop_containers_for_subscriber()
{
    subscriber_id="$1"
    check_for_container_for_subscriber $subscriber_id
    echo "Stopping containers for subscriber ${subscriber_id}..."
    subscriber_label=$(label_for_subscriber_id $subscriber_id)
    (MM_SUBSCRIBER_ID="$subscriber_id" \
       MM_API_SOURCE_IMAGE="$api_docker_image_id:$docker_image_tag" \
       MM_API_ENV_FILE="$docker_env_file" \
       MM_CERTS_DIR="$certs_dir" \
       MM_MSO_SECRET="$mso_secret" \
       $DOCKER_COMPOSE_CMD -f "$docker_compose_file" \
                           --project-name $subscriber_label down) \
       || bailout "Couldn't stop subscriber ${subscriber_id}"
}

function restart_containers_for_subscriber()
{
    subscriber_id="$1"
    check_for_container_for_subscriber $subscriber_id
    echo "Restarting containers for subscriber ${subscriber_id}..."
    subscriber_label=$(label_for_subscriber_id $subscriber_id)
    (MM_SUBSCRIBER_ID="$subscriber_id" \
       MM_API_SOURCE_IMAGE="$api_docker_image_id:$docker_image_tag" \
       MM_APP_SOURCE_IMAGE="$app_docker_image_id:$docker_image_tag" \
       MM_API_ENV_FILE="$docker_env_file" \
       MM_CERTS_DIR="$certs_dir" \
       MM_MSO_SECRET="$mso_secret" \
       $DOCKER_COMPOSE_CMD -f "$docker_compose_file" \
                           --project-name $subscriber_label restart) \
       || bailout "Error restarting subscriber ${subscriber_id}"
}

function create_nginx_rules_for_subscriber()
{
    if [ ! -d "${nginx_conf_dir}" ]; then
        bailout "${nginx_conf_dir} does not exist or is not a directory"
    fi

    subscriber_id="$1"
    mm_api_container_id=$(get_container_name_for_subscriber $subscriber_id mm-api)
    # mm_app_container_id=$(get_container_name_for_subscriber $subscriber_id mm-app)
    mm_api_priv_ip_addr=$(get_ip_address_for_container ${mm_api_container_id})

    # mm_app_priv_ip_addr=$(get_ip_address_for_container ${mm_app_container_id})

    nginx_rule_file_for_subscriber=$(get_nginx_rule_file_for_subscriber $subscriber_id)
    # echo "create_nginx_rules_for_subscriber: nginx_rule_file_for_subscriber=$nginx_rule_file_for_subscriber"
    rules="\
# Forwarding rules for container ${mm_api_container_id}
location /sub/${subscriber_id}/api/ {
    proxy_pass http://${mm_api_priv_ip_addr}:3030/;
}
"
    # echo "Forwarding rule for subscriber $subscriber_id: $rules"
    echo "$rules" > $nginx_rule_file_for_subscriber
}

function remove_nginx_rules_for_subscriber()
{
    if [ ! -d "${nginx_conf_dir}" ]; then
        bailout "${nginx_conf_dir} does not exist or is not a directory"
    fi

    subscriber_id="$1"
    nginx_rule_file_for_subscriber=$(get_nginx_rule_file_for_subscriber $subscriber_id)
    rm -v $nginx_rule_file_for_subscriber
}

function issue_nginx_reload()
{
    echo "Issuing nginx reload (running '$nginx_reload_command')"
    $nginx_reload_command
}

function setup_web_proxy()
{
    echo "Setting up directory $NGINX_CONF_DIR for writing nginx conf files (using group 'docker')"
    sudo mkdir -v -p "$NGINX_CONF_DIR"
    sudo chown -v -R .docker "$NGINX_CONF_DIR"
    sudo chmod -v -R g+w "$NGINX_CONF_DIR"
    echo "-------------------------------------------------------------------------------------------"
    echo "NOTE: Add the following line to and/all nginx 'server' blocks (e.g. files in '/etc/nginx/sites-available/')"
    echo
    echo "  include $NGINX_CONF_DIR/*.conf;"
    echo "-------------------------------------------------------------------------------------------"
}

function create_mso_proxy_file()
{
    $OPENSSL_CMD rand -out $mso_secret_file -hex 512
    if [[ $? == 0 ]]; then
        echo "Saved a 512-hex-digit MSO shared secret to $mso_secret_file"
    else
        echo "Error: Could not write to $mso_secret_file (use --auth-secret-file to specify a different filename)"
    fi
}

function pull_docker_image()
{
    $DOCKER_CMD pull $api_docker_image_id:$docker_image_tag
}

# NOTE: ThiS FUNCTION ISN'T USED CURRENTLY - "docker-compose down" is used now instead
function cleanup_subscriber_resources()
{
    subscriber_id="$1"
    echo "Cleaning up resources for subscriber ${subscriber_id}..."

    container_list=$($DOCKER_CMD container ls -a -q --filter label=com.cablelabs.micronets.subscriber-id=$subscriber_id)
    # echo "Containers for ${subscriber_label}: ${container_list}"
    if [ ! -z "$container_list" ]; then
         deleted_containers=$($DOCKER_CMD container rm ${container_list})
         echo "Deleted containers for subscriber ${subscriber_id}: ${deleted_containers}"
    fi

    volume_list=$($DOCKER_CMD volume ls -q --filter label=com.cablelabs.micronets.subscriber-id=$subscriber_id)
    # echo "Volumes for ${subscriber_id}: ${volume_list}"
    if [ ! -z "$volume_list" ]; then
         deleted_volumes=$($DOCKER_CMD volume rm ${volume_list})
         echo "Deleted volumes for subscriber ${subscriber_id}: ${deleted_volumes}"
    fi

    network_list=$($DOCKER_CMD network ls -q --filter label=com.cablelabs.micronets.subscriber-id=$subscriber_id)
    # echo "Networks for ${subscriber_id}: ${network_list}"
    if [ ! -z "$network_list" ]; then
         deleted_networks=$($DOCKER_CMD network rm ${network_list})
         echo "Deleted networks for subscriber ${subscriber_id}: ${deleted_networks}"
    fi
}

#
# main logic
#

process_arguments "$@"

if [[ $dump_vars ]]; then
  echo "Script directory: ${script_dir}"
  echo "Operation: ${operation}"
  echo "MM API docker image: ${api_docker_image_id}"
  echo "MM API docker image: ${app_docker_image_id}"
  echo "MM docker image tag: ${docker_image_tag}"
  echo "Docker reload command: ${nginx_reload_command}"
  echo "nginx config directory: ${nginx_conf_dir}"
  echo "certificate directory: ${certs_dir}"
  echo "mso secret: ${mso_secret}"
  echo "mso secret file: ${mso_secret_file}"
fi

subscriber_env_tmp_file="/tmp/mm-sub-${subscriber_id}.end"

if [ "$operation" == "pull"  ]; then
    pull_docker_image
elif [ "$operation" == "create" -o "$operation" == "start" ]; then
    start_subscriber $subscriber_id
    create_nginx_rules_for_subscriber $subscriber_id
    issue_nginx_reload
elif [ "$operation" == "delete" ]; then
    delete_subscriber $subscriber_id
    remove_nginx_rules_for_subscriber $subscriber_id
    issue_nginx_reload
elif [ "$operation" == "stop" ]; then
    stop_containers_for_subscriber $subscriber_id
    remove_nginx_rules_for_subscriber $subscriber_id
    issue_nginx_reload
elif [ "$operation" == "restart" ]; then
    restart_containers_for_subscriber $subscriber_id
    remove_nginx_rules_for_subscriber $subscriber_id
    create_nginx_rules_for_subscriber $subscriber_id
    issue_nginx_reload
elif [ "$operation" == "list" ]; then
    list_containers_for_subscriber $subscriber_id
    list_resources_for_subscriber $subscriber_id
elif [ "$operation" == "address" -o "$operation" == "addr" ]; then
    list_container_addresses_for_subscriber $subscriber_id
elif [ "$operation" == "env" ]; then
    list_container_env_for_subscriber $subscriber_id
elif [ "$operation" == "logs" ]; then
    show_mmapi_logs_for_subscriber $subscriber_id
elif [ "$operation" == "trace" ]; then
    trace_mmapi_logs_for_subscriber $subscriber_id
elif [ "$operation" == "stats" ]; then
    print_stats
elif [ "$operation" == "inspect" ]; then
    inspect_mmapi_for_subscriber $subscriber_id
elif [ "$operation" == "setup-web-proxy" ]; then
    setup_web_proxy
elif [ "$operation" == "create-mso-secret" ]; then
    create_mso_proxy_file
else
    bailout_with_usage "Unrecognized operation: $operation"
fi
